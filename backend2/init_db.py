#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º root
"""

from app.core.database import engine, SessionLocal
from app.models import Base, User, Flow
from app.schemas.user import UserCreate
from app.schemas.flow import FlowCreate
import uuid


def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(bind=engine)

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å root
        root_user = db.query(User).filter(User.username == "root").first()

        if not root_user:
            print("–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è root...")

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è root
            root_user_data = UserCreate(
                username="root",
                email="root@krok-mvp.local",
                is_active=True
            )

            root_user = User(
                username=root_user_data.username,
                email=root_user_data.email,
                is_active=root_user_data.is_active
            )

            db.add(root_user)
            db.commit()
            db.refresh(root_user)

            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å root —Å–æ–∑–¥–∞–Ω —Å ID: {root_user.id}")

            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è root
            flow_id = f"flow_{uuid.uuid4().hex[:8]}"
            default_flow = Flow(
                flow_id=flow_id,
                name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫",
                description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                user_id=root_user.id
            )

            db.add(default_flow)
            db.commit()
            db.refresh(default_flow)

            print(f"‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω —Å ID: {default_flow.flow_id}")

        else:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å root —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID: {root_user.id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É root –ø–æ—Ç–æ–∫–∏
            root_flows = db.query(Flow).filter(Flow.user_id == root_user.id).all()
            if not root_flows:
                print("–°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è root...")

                flow_id = f"flow_{uuid.uuid4().hex[:8]}"
                default_flow = Flow(
                    flow_id=flow_id,
                    name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫",
                    description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    user_id=root_user.id
                )

                db.add(default_flow)
                db.commit()
                db.refresh(default_flow)

                print(f"‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω —Å ID: {default_flow.flow_id}")
            else:
                print(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è root —É–∂–µ –µ—Å—Ç—å {len(root_flows)} –ø–æ—Ç–æ–∫–æ–≤")

        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å root –≥–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()


if __name__ == "__main__":
    init_database()